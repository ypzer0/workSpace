<template>
  <page :better-scroll="betterScroll">
    <cart-header
        slot="top"
        :headerRight="headerRight"
        :cartInfo="cartInfo"
        @change-model="changeModel"></cart-header>
    <cart-checkout
      slot="bottom"
      :cartInfo="cartInfo"
      @checkout="checkoutHandler"
      @delete-goods="deleteGoods"
      @select-all="selectAll"
      v-if="checkoutVisible"></cart-checkout>
    <cart-default v-if="defaultVisible"></cart-default>
    <cart-main
        v-if="mianVisible"
        :list="cart.listGroup"
         @goods-number="goodsNumber"
        @select="select"
        @select-group="selectGroup"></cart-main>
  </page>
</template>

<script type="text/ecmascript-6">
import Vue from 'vue'
import cartHeader from './cart-header'
import cartCheckout from './cart-checkout'
import cartDefault from './cart-default'
import cartMain from './cart-main'
import {mapState, mapGetters, mapMutations, mapActions} from 'vuex'

export default {
  computed: {
    ...mapState('user', ['isLogin']),
    ...mapState('cart', ['cart']),
    ...mapGetters('cart', ['cartGroup', 'cartInfo']),
    betterScroll () {
      return this.isLogin && this.cart.listGroup.length > 0
    },
    headerRight () {
      return this.isLogin && this.cart.listGroup.length > 0
    },
    defaultVisible () {
      return !this.isLogin || this.cart.listGroup.length === 0
    },
    mianVisible () {
      return this.isLogin
    },
    checkoutVisible () {
      return this.isLogin && this.cart.listGroup.length > 0
    }
  },
  components: {
    cartHeader,
    cartCheckout,
    cartDefault,
    cartMain
  },
  methods: {
    ...mapMutations('cart', ['TOGGLE_MODEL', 'SELECT_GOODS', 'SELECT_GROUP', 'SELECT_ALL']),
    ...mapActions('cart', ['updateUserCartGoods', 'deleteUserCartGoods', 'checkout', 'LoadCar', 'GoodsChecked', 'UpdateGoodsNumber', 'CartDelete']),
    changeModel () {
      this.TOGGLE_MODEL()
    },
    checkoutHandler (a) {
      if (a.length) {
        // this.checkout(a).then(res => {
        //   this.$go(`/checkout?id=${res}`)
        // })
        this.$go('/checkout/cart')
      } else {
        this.$toast('商品数量不能少于一件', 'warn')
      }
    },
    deleteGoods (o) {
      // this.deleteUserCartGoods(o)
      this.CartDelete(this.cart.list).then(res=>{
        if(res.code == 0){
          this.$toast('请选择商品', 'warn')
        }
      })
    },
    goodsNumber (o) {
      if (o.type === 'sub' && o.number === 1) {
        this.$toast('商品数量不能少于一件', 'warn')
        return
      }
      // this.updateUserCartGoods(o)
      this.UpdateGoodsNumber(o);
    },
    select (o) {
      this.SELECT_GOODS(o)
      var para = {
        isChecked: o.select ? 1 : 0,
        productIds: o.proId
      };
      this.GoodsChecked(para);
      
    },
    selectGroup (o) {
      this.SELECT_GROUP(o)
      
      var proids = [];
      o.list.forEach(ele => {
        proids.push(ele.proId);
      });

      var para = {
        isChecked: o.select ? 1 : 0,
        productIds: proids.join(',')
      };

      this.GoodsChecked(para);

    },
    selectAll () {
      this.SELECT_ALL()
      
      var proids = [];
      this.cart.list.forEach(ele => {
        proids.push(ele.proId);
      });
      var para = {
        isChecked: this.cart.select.length == 0 ? 0 : 1,
        productIds: proids.join(',')
      };

      this.GoodsChecked(para);
    }
  },
  created() {

  },
  activated(){

    this.LoadCar();
  },
  
}
</script>
