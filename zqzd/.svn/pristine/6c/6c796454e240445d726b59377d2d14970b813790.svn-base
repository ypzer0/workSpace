import * as types from './mutation-types'
import {api} from '@/service/api'
import {toast} from '@/libs/cube-ui'
import { debug } from 'util';
import Vue from 'vue'

export const actions = {

  async getIdentifyingCode ({commit, state}, o) {
    if (state.identifyingCode.time !== 60) {
      toast('请稍后重试', 'correct')
    } else {
      let res = await api.common.getIdentifyingCode()
      if (res.success) {
        toast('发送验证码成功', 'correct')
        const timer = setInterval(() => {
          if (state.identifyingCode.time === 0) {
            commit(types.CLEAR_IDENTIFY_TIMER)
          } else {
            commit(types.UPDATE_IDENTIFY_TIMER, state.identifyingCode.time - 1)
          }
        }, 1000)
        commit(types.INIT_IDENTIFY_TIMER, timer)
      } else {
        toast(res.msg, 'warn')
      }
    }
  },
  
  //获取订单
  async getOrderList ({commit, state}, o) {
    var para = {
      ostate: o.state
    }
    let res = await api.order.getOrderList(para)
    if (res.success) {
      switch(o.state){
        case 0:
        commit(types.LOAD_ORDER, res.data);
        break;
        case 1:
        commit(types.LOAD_WAITPAY, res.data);
        break;
        case 2:
        commit(types.LOAD_WAITSHIP, res.data);
        break;
        case 3:
        commit(types.LOAD_READYSHIP, res.data);
        break;
        case 4:
        commit(types.LOAD_RECODE, res.data);
        break;
      }
    }
  },

  async orderEventClick ({commit, dispatch, state}, o) {
    return dispatch(o.btn.type, o);
  },

  
  async waitPayCancel ({commit, dispatch, state}, o) {

    var para = {
      orderId: o.data.id
    };
    let res = await api.order.cancelOrder(para);
    if (res.success) {
    }
    return res;
    // console.log(o);

  },
  async waitPayPay ({commit, state}, o) {
    var para ={
      orderId : o.data.id
    }
    let res1 = await api.order.pay(para)
    if(res1.success){
      
      // window.location.href = res1.data.url + "&redirect_url=" + window.location.origin + "/dx/transaction/" + o.data.id;
    }
    return res1;
    
    // console.log(o);
  },
  async addComment ({commit, state}, o) {
    var para ={
      orderId : o.data.id
    }
    let res1 = await api.order.pay(para)
    if(res1.success){
      
      // window.location.href = res1.data.url + "&redirect_url=" + window.location.origin + "/dx/transaction/" + o.data.id;
    }
    return res1;
    
    // console.log(o);
  },
  
  async sureShip ({commit, state}, o) {
    var para ={
      orderId : o.data.id
    }
    let res1 = await api.order.sureShip(para)
    if(res1.success){

    }
    return res1;
    // console.log(o);
  },

  async getOrderDetail ({commit, state}, o) {
    var para ={
      orderId : o.id
    }
    let res1 = await api.order.getOrderDetail(para)
    if(res1.success){
      return res1.data;
    }
    // console.log(o);
  },

  // 订单退款
  async orderRefund ({commit, state}, o) {
    var para ={
      orderId : o.data.id
    }
    let res1 = await api.order.orderRefund(para)
    if(res1.success){
      
    }
    return res1;
    // console.log(o);
  },
  
  // 订单退货
  async returnGoods ({commit, state}, o) {
    var para ={
      orderId : o.data.id
    }
    let res1 = await api.order.returnGoods(para)
    if(res1.success){
      
    }
    return res1;
    // console.log(o);
  },

  
}
